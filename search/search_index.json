{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cashu-Docs","text":"<p>This website is a gentle introduction to Cashu for developers. On the following pages you will find code examples for typical Cashu operations utilizing different programming languages and Cashu libraries</p>"},{"location":"mint/","title":"Mint a token","text":"<p>Minting is the process of exchanging some payment for a mint's token. This is a two step-process:</p> <ol> <li> <p>Alices requests a mint, specifying the amount, the unit and the payment method. If the request is valid the mint returns a quote and a payment request.</p> </li> <li> <p>Once the payment is made, Alice can send the quote ID, as well as outputs to be signed in a second request to \"mint\" a token.</p> </li> </ol> <p>Most of the complexity (especially around the cryptography involved) is hidden by Cashu libraries. Down below you can find some examples written using most common libraries.</p> TSRust <pre><code>import { CashuMint, CashuWallet, MintQuoteState } from \"@cashu/cashu-ts\";\nconst mintUrl = \"http://localhost:3338\";\nconst mint = new CashuMint(mintUrl);\nconst wallet = new CashuWallet(mint);\nconst mintQuote = await wallet.createMintQuote(64);\nconst interval = setInterval(async () =&gt; {\n  const mintQuoteChecked = await wallet.checkMintQuote(mintQuote.quote);\n  if (mintQuoteChecked.state == MintQuoteState.PAID) {\n    clearInterval(interval);\n    const { proofs } = await wallet.mintTokens(64, mintQuote.quote);\n  }\n}, 10000);\n</code></pre> <pre><code>use std::sync::Arc;\nuse std::time::Duration;\n\nuse cdk::amount::SplitTarget;\nuse cdk::cdk_database::WalletMemoryDatabase;\nuse cdk::nuts::{CurrencyUnit, MintQuoteState};\nuse cdk::wallet::Wallet;\nuse cdk::Amount;\nuse rand::Rng;\nuse tokio::time::sleep;\n\n#[tokio::main]\nasync fn main() {\n    let seed = rand::thread_rng().gen::&lt;[u8; 32]&gt;();\n\n    let mint_url = \"https://testnut.cashu.space\";\n    let unit = CurrencyUnit::Sat;\n    let amount = Amount::from(10);\n\n    let localstore = WalletMemoryDatabase::default();\n\n    let wallet = Wallet::new(mint_url, unit, Arc::new(localstore), &amp;seed);\n\n    let quote = wallet.mint_quote(amount).await.unwrap();\n\n    println!(\"Pay request: {}\", quote.request);\n\n    loop {\n        let status = wallet.mint_quote_state(&amp;quote.id).await.unwrap();\n\n        if status.state == MintQuoteState::Paid {\n            break;\n        }\n\n        println!(\"Quote state: {}\", status.state);\n\n        sleep(Duration::from_secs(5)).await;\n    }\n\n    let receive_amount = wallet\n        .mint(&amp;quote.id, SplitTarget::default(), None)\n        .await\n        .unwrap();\n\n    println!(\"Minted {}\", receive_amount);\n\n}\n</code></pre>"}]}